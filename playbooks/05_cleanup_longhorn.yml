---
- name: ♻️ Limpieza completa de Longhorn en nodos controller, storage y workers
  hosts: controller,storage,workers
  become: true
  gather_facts: false

  vars:
    kubeconfig_path: "/home/victory/.kube/config"

  pre_tasks:
    - name: ✅ Confirmación requerida
      assert:
        that:
          - confirm_cleanup | default(false) | bool
        fail_msg: "❌ ERROR: Debe confirmar con -e 'confirm_cleanup=yes'"
        success_msg: "🧹 Confirmación recibida en {{ inventory_hostname }}"

  tasks:

    # CONTROLLER
    - name: 🔧 Instalar jq (requerido para eliminar finalizers)
      raw: |
        which jq || (apt-get update && apt-get install -y jq) || (yum install -y jq)
      when: "'controller' in group_names"

    - name: 🗑️ Eliminar Helm release de Longhorn
      raw: |
        export PATH=$PATH:/usr/local/bin
        export KUBECONFIG={{ kubeconfig_path }}
        helm uninstall longhorn -n longhorn-system || true
      when: "'controller' in group_names"

    - name: 🧨 Eliminar TODOS los recursos del namespace
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        kubectl delete all,sa,configmaps,secrets,crd,volumes,pvc,sc \
          --all -n longhorn-system --ignore-not-found --wait=true || true
      when: "'controller' in group_names"

    - name: 🚫 Forzar eliminación del namespace con finalizers (si queda bloqueado)
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        kubectl get namespace longhorn-system -o json | \
        jq 'del(.spec.finalizers)' | \
        kubectl replace --raw "/api/v1/namespaces/longhorn-system/finalize" -f - || true
      when: "'controller' in group_names"

    - name: ⏳ Espera breve para asegurar eliminación completa
      pause:
        seconds: 15
      when: "'controller' in group_names"

    - name: 🔎 Verificar que el namespace y recursos fueron eliminados
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        echo "🔍 Verificando namespace..."
        kubectl get ns longhorn-system || echo "✅ Namespace eliminado"
        echo "🔍 Verificando CRDs..."
        kubectl get crd | grep longhorn || echo "✅ CRDs eliminados"
        echo "🔍 Verificando recursos..."
        kubectl get all -A | grep longhorn || echo "✅ Sin recursos activos"
      register: longhorn_cleanup_status
      when: "'controller' in group_names"

    - name: 📋 Resultado de la limpieza en controller
      debug:
        var: longhorn_cleanup_status.stdout_lines
      when: "'controller' in group_names"

    # STORAGE
    - name: 🔌 Desmontar volúmenes NFS y Longhorn
      raw: |
        umount -f /srv/nfs/postgresql || true
        umount -f /srv/nfs/shared || true
        umount -f /mnt/longhorn-disk || true
      ignore_errors: true
      when: "'storage' in group_names"

    - name: 🛑 Detener y deshabilitar NFS
      raw: |
        systemctl stop nfs-server || rc-service nfs stop || true
        systemctl disable nfs-server || true
      when: "'storage' in group_names"

    - name: 🗑️ Eliminar volúmenes lógicos
      raw: |
        lvremove -y /dev/vg_storage/postgres_lv || true
        lvremove -y /dev/vg_storage/shared_lv || true
        lvremove -y /dev/vg_storage/longhorn_lv || true
      when: "'storage' in group_names"

    - name: 🧨 Eliminar grupo de volúmenes
      raw: vgremove -y vg_storage || true
      when: "'storage' in group_names"

    - name: 💣 Borrar firma LVM y tabla de partición
      raw: |
        pvremove -y /dev/vdb1 || true
        parted /dev/vdb rm 1 || true
      when: "'storage' in group_names"

    # WORKERS
    - name: 🧹 Borrar sistema de archivos en /dev/vdb
      raw: wipefs -a /dev/vdb || true
      when: "'workers' in group_names"

    # FINAL
    - name: ✅ Confirmación final
      debug:
        msg: "✅ Limpieza finalizada correctamente en {{ inventory_hostname }}. Puedes reiniciar el nodo si lo deseas."