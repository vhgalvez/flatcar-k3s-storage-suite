# playbooks/05_ingress-longhorn-internal.yml
---
- name: 🚪 5 - Exponer Longhorn Dashboard con IngressRoute Interno y Autenticación
  hosts: localhost
  become: false
  gather_facts: false

  vars_files:
    - ../vars/main.yml  # Define: longhorn_auth_user, longhorn_auth_pass, longhorn_namespace, domain

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubeseal_path: "/usr/local/bin/kubeseal"
    kubectl_path: "/usr/local/bin/kubectl"
    python_bin: "/usr/bin/python3"
    files_dir: "{{ playbook_dir }}/files"
    rendered_secret_path: "{{ files_dir }}/longhorn-dashboard-secret.yaml"
    sealed_secret_path: "{{ files_dir }}/longhorn-dashboard-sealed.yaml"
    secret_name: "longhorn-dashboard-auth"
    middleware_name: "longhorn-dashboard-auth"

  tasks:

    - name: 📁 Crear directorio local para secrets (si no existe)
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: "0755"

    - name: 🔐 Generar hash htpasswd (basicAuth con MD5)
      command: >
        {{ python_bin }} -c "import crypt; print('{{ longhorn_auth_user }}:' + crypt.crypt('{{ longhorn_auth_pass }}', crypt.mksalt(crypt.METHOD_MD5)))"
      register: htpasswd_output
      changed_when: true
      failed_when: htpasswd_output.rc != 0 or htpasswd_output.stdout == ""

    - name: 📄 Renderizar plantilla del Secret plano (YAML)
      template:
        src: ../templates/secrets/basic-auth-secret.yaml.j2
        dest: "{{ rendered_secret_path }}"
      vars:
        basic_auth: "{{ htpasswd_output.stdout | b64encode }}"
        secret_name: "{{ secret_name }}"
        namespace: "{{ longhorn_namespace }}"

    - name: 🔐 Cifrar el Secret con kubeseal (SealedSecret)
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace {{ longhorn_namespace }}
        --format yaml
        < "{{ rendered_secret_path }}" > "{{ sealed_secret_path }}"
      args:
        executable: /bin/bash
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: seal_output
      failed_when: seal_output.rc != 0

    - name: 🚀 Aplicar el SealedSecret al clúster
      shell: >
        {{ kubectl_path }} apply -f "{{ sealed_secret_path }}"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: apply_output
      changed_when: "'created' in apply_output.stdout or 'configured' in apply_output.stdout"
      failed_when: apply_output.rc != 0

    - name: 📄 Renderizar Middleware de autenticación
      template:
        src: ../templates/longhorn/longhorn-dashboard-auth-middleware.yaml.j2
        dest: /tmp/longhorn-dashboard-auth-middleware.yaml
      vars:
        secret_name: "{{ secret_name }}"
        namespace: "{{ longhorn_namespace }}"

    - name: 📄 Renderizar IngressRoute para el Dashboard
      template:
        src: ../templates/longhorn/longhorn-dashboard-ingressroute-internal.yaml.j2
        dest: /tmp/longhorn-dashboard-ingressroute-internal.yaml
      vars:
        domain: "{{ domain }}"
        middleware_name: "{{ middleware_name }}"
        namespace: "{{ longhorn_namespace }}"

    - name: 🚀 Aplicar Middleware (auth)
      shell: >
        {{ kubectl_path }} apply -f /tmp/longhorn-dashboard-auth-middleware.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: 🚀 Aplicar IngressRoute
      shell: >
        {{ kubectl_path }} apply -f /tmp/longhorn-dashboard-ingressroute-internal.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"