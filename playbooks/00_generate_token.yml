---
- name: 🧹 0️⃣ Eliminar ServiceAccount 'default' en namespace 'default'
  hosts: masters
  become: true
  gather_facts: false
  vars:
    ansible_python_interpreter: /bin/false  # Flatcar no tiene Python

  tasks:
    - name: 🔍 Verificar si k3s está disponible
      raw: |
        command -v k3s && k3s kubectl version --client
      register: kubectl_check
      failed_when: kubectl_check.rc != 0

    - name: 🧹 Eliminar ServiceAccount 'default' si existe (namespace default)
      raw: |
        k3s kubectl delete serviceaccount default --ignore-not-found=true --namespace default
      register: sa_delete

    - name: 📦 Resultado de eliminación del SA default
      debug:
        var: sa_delete.stdout_lines


- name: 🔐 0️⃣ Generar token JWT en master con permisos adecuados
  hosts: masters[0]
  become: true
  gather_facts: false
  vars:
    ansible_python_interpreter: /bin/false  # Para Flatcar
    kubeconfig_path: "/etc/rancher/k3s/k3s.yaml"
    local_token_path: "/tmp/traefik-token.jwt"
    token_duration: "87600h"
    serviceaccount_name: "remote-access"
    rolebinding_name: "remote-access-admin"

  tasks:
    - name: 🧹 Eliminar ServiceAccount anterior si existe
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        k3s kubectl delete serviceaccount {{ serviceaccount_name }} --ignore-not-found=true

    - name: 🧹 Eliminar ClusterRoleBinding anterior si existe
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        k3s kubectl delete clusterrolebinding {{ rolebinding_name }} --ignore-not-found=true

    - name: 🧾 Crear ServiceAccount '{{ serviceaccount_name }}'
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        k3s kubectl create serviceaccount {{ serviceaccount_name }}

    - name: 🔑 Crear ClusterRoleBinding '{{ rolebinding_name }}'
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        k3s kubectl create clusterrolebinding {{ rolebinding_name }} \
          --clusterrole=cluster-admin \
          --serviceaccount=default:{{ serviceaccount_name }}

    - name: 🔐 Generar token JWT para '{{ serviceaccount_name }}'
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        k3s kubectl create token {{ serviceaccount_name }} --duration={{ token_duration }}
      register: token_output
      changed_when: false

    - name: 📄 Guardar token en archivo
      raw: |
        echo '{{ token_output.stdout }}' > {{ local_token_path }}

    - name: 🟢 Token generado correctamente
      debug:
        var: token_output.stdout
      no_log: true