---
- name: 🚀 4 - Instalar Longhorn desde el nodo controller
  hosts: controller
  become: true
  gather_facts: false

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubectl_bin: "/usr/local/bin/kubectl"
    helm_bin: "/usr/local/bin/helm"
    longhorn_namespace: "longhorn-system"

  pre_tasks:

    - name: 🔍 Comprobar si el namespace de Longhorn existe
      command: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get namespace {{ longhorn_namespace }}
      register: longhorn_ns_check
      failed_when: false
      changed_when: false

    - name: ⚠️ Verificar si el namespace tiene recursos
      command: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get all -n {{ longhorn_namespace }}
      register: longhorn_check
      failed_when: false
      changed_when: false
      when: "'NotFound' not in longhorn_ns_check.stdout"

    - name: ❌ Abortamos si el namespace '{{ longhorn_namespace }}' tiene recursos
      fail:
        msg: |
          ⚠️ El namespace '{{ longhorn_namespace }}' contiene recursos de una instalación anterior.
          🧹 Para limpiar y reinstalar ejecuta:
          ansible-playbook playbooks/cleanup_longhorn.yml -i inventory/hosts.ini -e "confirm_cleanup=yes"
          Recursos detectados:
          {{ longhorn_check.stdout | default('') }}
      when:
        - "'NotFound' not in longhorn_ns_check.stdout"
        - longhorn_check.stdout is defined
        - longhorn_check.stdout | trim != ''
        - "'No resources found' not in longhorn_check.stdout"

  tasks:

    - name: 📥 Añadir repositorio Helm de Longhorn (si no existe)
      command: >
        {{ helm_bin }} repo add longhorn https://charts.longhorn.io
      register: helm_repo_add
      failed_when: false
      changed_when: "'already exists' not in helm_repo_add.stdout"

    - name: 🔄 Actualizar repositorio Helm
      command: >
        {{ helm_bin }} repo update

    - name: 🚀 Instalar Longhorn con Helm
      command: >
        {{ helm_bin }} upgrade --install longhorn longhorn/longhorn
        --namespace {{ longhorn_namespace }}
        --create-namespace
        --wait
        --timeout 10m0s
        --kubeconfig {{ kubeconfig_path }}
      register: longhorn_install
      failed_when: longhorn_install.rc != 0

    - name: ⏳ Esperar a que los pods estén listos (máx 5 minutos)
      command: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} wait --for=condition=Ready pod -n {{ longhorn_namespace }} --all --timeout=300s
      register: pod_ready
      failed_when: pod_ready.rc != 0

    - name: 📊 Mostrar estado de pods, PVCs y PVs
      shell: |
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pods -n {{ longhorn_namespace }}
        echo ""
        echo "📁 PVCs:"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pvc -A
        echo ""
        echo "📦 PVs:"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pv
      register: volumes_info

    - name: ✅ Resultado del despliegue
      debug:
        var: volumes_info.stdout_lines