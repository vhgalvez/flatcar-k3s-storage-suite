# playbooks\01_prepare-disks.yml
---
- name: 3 - Preparar almacenamiento en nodos storage y workers
  hosts: storage,workers
  become: true
  gather_facts: false

  tasks:
    # === REQUISITOS PARA LONGHORN ===

    - name: 📦 Instalar paquete iSCSI initiator (RHEL-based)
      raw: |
        which iscsiadm || (dnf install -y iscsi-initiator-utils)
      register: iscsi_rhel_install
      changed_when: "'Complete!' in iscsi_rhel_install.stdout or 'installed' in iscsi_rhel_install.stdout"
      failed_when: false
      tags: install

    - name: 🔄 Activar y arrancar iscsid (RHEL-based)
      raw: systemctl enable --now iscsid
      when: iscsi_rhel_install is defined
      ignore_errors: true
      tags: install

    # === VALIDACIÓN INICIAL SEGURA ===

    - name: 🔒 Bloquear si /dev/vdb está montado (para evitar sobrescritura)
      raw: |
        mount | grep -q '^/dev/vdb' && echo "❌ /dev/vdb está montado. Abortando." && exit 1 || exit 0
      register: vdb_mount_check
      failed_when: vdb_mount_check.rc != 0
      changed_when: false
      tags: safety

    - name: ❌ Bloquear si /dev/vdb tiene particiones o LVM activas
      raw: |
        lsblk -no TYPE /dev/vdb | grep -qE 'part|lvm' && echo "❌ /dev/vdb tiene particiones o LVM activas. Abortando." && exit 1 || exit 0
      register: vdb_lvm_check
      failed_when: vdb_lvm_check.rc != 0
      changed_when: false
      tags: safety

    - name: 📀 Verificar existencia del disco /dev/vdb
      raw: test -b /dev/vdb
      register: disk_check
      failed_when: disk_check.rc != 0
      changed_when: false
      tags: check

    # === BLOQUE STORAGE ===

    - name: 🧹 Crear tabla de particiones GPT
      raw: parted -s /dev/vdb mklabel gpt
      when: "'storage' in group_names"
      tags: storage

    - name: 📏 Crear partición primaria 100%
      raw: parted -s /dev/vdb mkpart primary 0% 100%
      when: "'storage' in group_names"
      tags: storage

    - name: ⏳ Esperar a que /dev/vdb1 aparezca
      raw: |
        for i in $(seq 1 5); do
          test -b /dev/vdb1 && exit 0
          sleep 1
        done
        exit 1
      register: wait_partition
      failed_when: wait_partition.rc != 0
      when: "'storage' in group_names"
      tags: storage

    - name: 💽 Crear volumen físico LVM
      raw: pvcreate -ff -y /dev/vdb1
      when: "'storage' in group_names"
      tags: storage

    - name: 🧱 Crear grupo de volúmenes
      raw: vgcreate vg_storage /dev/vdb1
      when: "'storage' in group_names"
      tags: storage

    - name: 📦 Crear volúmenes lógicos (PostgreSQL, Shared, Longhorn)
      raw: |
        lvcreate -y -L 20G -n postgres_lv vg_storage
        lvcreate -y -L 20G -n shared_lv vg_storage
        lvcreate -y -l 100%FREE -n longhorn_lv vg_storage
      when: "'storage' in group_names"
      tags: storage

    - name: 🧹 Formatear volúmenes como ext4
      raw: |
        mkfs.ext4 -F /dev/vg_storage/postgres_lv
        mkfs.ext4 -F /dev/vg_storage/shared_lv
        mkfs.ext4 -F /dev/vg_storage/longhorn_lv
      when: "'storage' in group_names"
      tags: storage

    - name: 📁 Crear directorios de montaje
      raw: mkdir -p /srv/nfs/postgresql /srv/nfs/shared /mnt/longhorn-disk
      when: "'storage' in group_names"
      tags: storage

    - name: 🔗 Montar volúmenes en storage
      raw: |
        mount /dev/vg_storage/postgres_lv /srv/nfs/postgresql
        mount /dev/vg_storage/shared_lv /srv/nfs/shared
        mount /dev/vg_storage/longhorn_lv /mnt/longhorn-disk
      when: "'storage' in group_names"
      tags: storage

    - name: 📦 Instalar servidor NFS
      raw: |
        which exportfs >/dev/null 2>&1 || \
        (apk add nfs-utils || yum install -y nfs-utils || apt-get install -y nfs-kernel-server)
      when: "'storage' in group_names"
      tags: storage

    - name: 📝 Configurar /etc/exports para NFS
      raw: |
        echo "/srv/nfs/postgresql *(rw,sync,no_subtree_check,no_root_squash)" > /etc/exports
        echo "/srv/nfs/shared *(rw,sync,no_subtree_check,no_root_squash)" >> /etc/exports
      when: "'storage' in group_names"
      tags: storage

    - name: 🔄 Habilitar y reiniciar NFS
      raw: |
        (systemctl enable nfs-server && systemctl restart nfs-server) || rc-service nfs restart || true
      when: "'storage' in group_names"
      tags: storage

    # === BLOQUE WORKERS ===

    - name: 💽 Formatear /dev/vdb como ext4
      raw: mkfs.ext4 -F /dev/vdb
      when: "'workers' in group_names"
      tags: workers

    - name: 📁 Crear punto de montaje para Longhorn
      raw: mkdir -p /mnt/longhorn-disk
      when: "'workers' in group_names"
      tags: workers

    - name: 🔗 Montar /dev/vdb en /mnt/longhorn-disk
      raw: mount /dev/vdb /mnt/longhorn-disk
      when: "'workers' in group_names"
      tags: workers

    # === VALIDACIÓN GENERAL ===

    - name: ✅ Validar montaje final
      raw: df -h | grep -E "/srv/nfs/postgresql|/srv/nfs/shared|/mnt/longhorn-disk"
      register: mount_check
      failed_when: mount_check.rc != 0
      tags: verify

    - name: 🟢 Mostrar estado de montajes
      debug:
        var: mount_check.stdout_lines
      tags: verify