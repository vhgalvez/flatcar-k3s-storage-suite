# playbooks\02_prepare_controller.yml
---
- name: 2 Preparar nodo controlador con kubectl, helm y configuración de acceso
  hosts: controller
  become: true
  gather_facts: true

  vars:
    kubectl_version: "v1.29.0"
    helm_version: "v3.14.0"
    kubectl_path: "/usr/local/bin/kubectl"
    helm_path: "/usr/local/bin/helm"
    helm_install_tmp: "/tmp/helm_install"
    kubeconfig_path: "/home/victory/.kube/config"
    kubeconfig_token_path: "/home/victory/.kube/token.jwt"
    vip_kubernetes: "10.17.5.10"

  pre_tasks:

    - name: 📄 Copiar token JWT desde master1 al controller
      fetch:
        src: /tmp/traefik-token.jwt
        dest: /tmp/token_from_master/
        flat: yes
      delegate_to: "{{ groups['masters'][0] }}"

    - name: 📥 Mover token a ruta final del usuario
      copy:
        src: "/tmp/token_from_master/traefik-token.jwt"
        dest: "{{ kubeconfig_token_path }}"
        owner: victory
        group: victory
        mode: '0600'

  tasks:

    - name: 📦 Instalar paquetes base
      package:
        name: [python3-pip, git, curl]
        state: present

    - name: 🧪 Instalar módulo Python Kubernetes
      pip:
        name: kubernetes

    - name: 📥 Descargar kubectl {{ kubectl_version }}
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: /tmp/kubectl
        mode: '0755'

    - name: ✅ Mover kubectl a {{ kubectl_path }}
      copy:
        src: /tmp/kubectl
        dest: "{{ kubectl_path }}"
        remote_src: yes
        mode: '0755'

    - name: 🔍 Verificar instalación de kubectl
      command: "{{ kubectl_path }} version --client"
      register: kubectl_version_output
      ignore_errors: yes

    - name: 📊 Mostrar salida de kubectl
      debug:
        var: kubectl_version_output.stdout

    - name: 📁 Crear directorio temporal de Helm
      file:
        path: "{{ helm_install_tmp }}"
        state: directory

    - name: 📥 Descargar Helm {{ helm_version }}
      get_url:
        url: "https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz"
        dest: "{{ helm_install_tmp }}/helm.tar.gz"

    - name: 📦 Extraer Helm
      unarchive:
        src: "{{ helm_install_tmp }}/helm.tar.gz"
        dest: "{{ helm_install_tmp }}"
        remote_src: yes

    - name: ✅ Mover Helm a {{ helm_path }}
      copy:
        src: "{{ helm_install_tmp }}/linux-amd64/helm"
        dest: "{{ helm_path }}"
        remote_src: yes
        mode: '0755'

    - name: 🧪 Verificar versión de Helm
      command: "{{ helm_path }} version"
      register: helm_version_output

    - name: 📊 Mostrar salida de Helm
      debug:
        var: helm_version_output.stdout

    - name: 🧹 Borrar temporales de Helm
      file:
        path: "{{ helm_install_tmp }}"
        state: absent

    - name: 📁 Crear carpeta .kube si no existe
      file:
        path: "{{ kubeconfig_path | dirname }}"
        state: directory
        owner: victory
        group: victory
        mode: '0700'

    - name: 🔁 Reemplazar 127.0.0.1 por VIP en kubeconfig (si existe)
      replace:
        path: "{{ kubeconfig_path }}"
        regexp: '127\.0\.0\.1'
        replace: "{{ vip_kubernetes }}"
      ignore_errors: true

    - name: ❌ Eliminar certificate-authority-data
      lineinfile:
        path: "{{ kubeconfig_path }}"
        regexp: '^\s*certificate-authority-data:'
        state: absent
      ignore_errors: true

    - name: ⚠️ Añadir 'insecure-skip-tls-verify' si falta
      replace:
        path: "{{ kubeconfig_path }}"
        regexp: '(^\s*server: https://{{ vip_kubernetes }}:6443)'
        replace: '\1\n    insecure-skip-tls-verify: true'
      ignore_errors: true

    - name: 🧹 Eliminar client-certificate y client-key si existen
      lineinfile:
        path: "{{ kubeconfig_path }}"
        regexp: '^\s*(client-certificate|client-key):'
        state: absent
      ignore_errors: true

    - name: 🔐 Insertar token JWT en kubeconfig
      blockinfile:
        path: "{{ kubeconfig_path }}"
        marker: "# {mark} ANSIBLE MANAGED TOKEN"
        insertafter: '^users:$'
        block: |
          - name: default
            user:
              token: "{{ lookup('file', kubeconfig_token_path) }}"
      when: kubeconfig_token_path is file

    - name: 🔒 Establecer permisos en kubeconfig y token
      file:
        path: "{{ item }}"
        owner: victory
        group: victory
        mode: '0600'
      loop:
        - "{{ kubeconfig_path }}"
        - "{{ kubeconfig_token_path }}"
      when: item is file
