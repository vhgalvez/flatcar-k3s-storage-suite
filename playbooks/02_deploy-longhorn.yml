# playbooks/02_deploy-longhorn.yml
---
- name: 🚀 2 - Instalar Longhorn (núcleo) desde localhost
  hosts: localhost
  become: true
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    longhorn_release: "longhorn"
    kubeconfig_path: "{{ kubeconfig_path }}"
    kubectl_bin: "{{ kubectl_path }}"
    helm_bin: "{{ helm_bin }}"

  pre_tasks:
    - name: 🔧 Crear namespace Longhorn si no existe
      command: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} create namespace {{ longhorn_namespace }}
      register: ns_create
      changed_when: "'created' in ns_create.stdout"
      failed_when: ns_create.rc != 0 and 'AlreadyExists' not in ns_create.stderr

    - name: ⚠️ Verificar si el namespace contiene recursos previos
      command: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get all -n {{ longhorn_namespace }}
      register: longhorn_check
      changed_when: false
      failed_when: false

    - name: ❌ Abortamos si el namespace NO está vacío
      fail:
        msg: |
          ⚠️ El namespace '{{ longhorn_namespace }}' ya contiene recursos.
          Ejecuta primero:
            ansible-playbook playbooks/cleanup_longhorn.yml -i inventory/hosts.ini -e "confirm_cleanup=yes"
          Recursos detectados:
          {{ longhorn_check.stdout | default('') }}
      when:
        - longhorn_check.stdout | trim != ''
        - "'No resources found' not in longhorn_check.stdout"

  tasks:
    - name: 📥 Añadir repositorio Helm (Longhorn)
      command: >
        {{ helm_bin }} repo add longhorn https://charts.longhorn.io
      register: helm_repo_add
      changed_when: "'already exists' not in helm_repo_add.stderr"
      failed_when: false

    - name: 🔄 Actualizar repositorio Helm
      command: "{{ helm_bin }} repo update"

    - name: 🚀 Instalar/Actualizar Longhorn con Helm
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        {{ helm_bin }} upgrade --install {{ longhorn_release }} longhorn/longhorn \
          --namespace {{ longhorn_namespace }} \
          --create-namespace \
          --wait --timeout 10m
      register: longhorn_install
      changed_when: "'deployed' in longhorn_install.stdout or 'has been upgraded' in longhorn_install.stdout"
      failed_when: longhorn_install.rc != 0

    - name: ⏳ Esperar que todos los pods estén en estado Ready (máx 5 min)
      shell: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} wait --for=condition=Ready pod -n {{ longhorn_namespace }} --all --timeout=300s

    - name: 📊 Mostrar estado final (pods, PVCs y PVs)
      shell: |
        echo "📦 Pods:"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pods -n {{ longhorn_namespace }}
        echo ""
        echo "📁 PVCs:"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pvc -A
        echo ""
        echo "📦 PVs:"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pv
      register: volumes_info
      changed_when: false

    - name: ✅ Resultado del despliegue de Longhorn
      debug:
        var: volumes_info.stdout_lines