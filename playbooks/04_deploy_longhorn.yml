# playbooks\04_deploy_longhorn.yml
---
- name: üöÄ 4 - Instalar Longhorn desde el nodo controller
  hosts: controller
  become: true
  gather_facts: false

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    helm_bin: "/usr/local/bin/helm"
    longhorn_namespace: "longhorn-system"

  pre_tasks:

    - name: üîç Comprobar si el namespace de Longhorn existe
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        kubectl get namespace {{ longhorn_namespace }} || true
      register: longhorn_ns_check
      changed_when: false

    - name: ‚ö†Ô∏è Verificar si el namespace tiene recursos
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        kubectl get all -n {{ longhorn_namespace }} || true
      register: longhorn_check
      changed_when: false
      when: "'NotFound' not in longhorn_ns_check.stdout"

    - name: ‚ùå Abortamos si el namespace '{{ longhorn_namespace }}' tiene recursos
      fail:
        msg: |
          ‚ö†Ô∏è El namespace '{{ longhorn_namespace }}' contiene recursos de una instalaci√≥n anterior.
          üßπ Ejecuta: ansible-playbook playbooks/06_cleanup_longhorn.yml -e "confirm_cleanup=yes"
          Recursos detectados:
          {{ longhorn_check.stdout }}
      when:
        - "'NotFound' not in longhorn_ns_check.stdout"
        - "'No resources found' not in longhorn_check.stdout"

  tasks:

    - name: üì• A√±adir repositorio Helm de Longhorn (si no existe)
      raw: |
        export PATH=/usr/local/bin:$PATH
        {{ helm_bin }} repo add longhorn https://charts.longhorn.io || true

    - name: üîÑ Actualizar repositorio Helm
      raw: |
        export PATH=/usr/local/bin:$PATH
        {{ helm_bin }} repo update

    - name: üöÄ Instalar Longhorn con Helm
      raw: |
        export PATH=/usr/local/bin:$PATH
        export KUBECONFIG={{ kubeconfig_path }}
        {{ helm_bin }} upgrade --install longhorn longhorn/longhorn \
          --namespace {{ longhorn_namespace }} \
          --create-namespace \
          --wait \
          --timeout 10m0s
      register: longhorn_install
      failed_when: longhorn_install.rc != 0

    - name: ‚è≥ Esperar a que los pods est√©n listos (m√°x 5 minutos)
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        kubectl wait --for=condition=Ready pod -n {{ longhorn_namespace }} --all --timeout=300s
      register: pod_ready
      failed_when: pod_ready.rc != 0

    - name: üìä Mostrar estado de pods, PVCs y PVs
      raw: |
        export KUBECONFIG={{ kubeconfig_path }}
        echo "üîç Pods:"
        kubectl get pods -n {{ longhorn_namespace }}
        echo ""
        echo "üìÅ PVCs:"
        kubectl get pvc -A
        echo ""
        echo "üì¶ PVs:"
        kubectl get pv
      register: volumes_info

    - name: ‚úÖ Resultado del despliegue
      debug:
        var: volumes_info.stdout_lines