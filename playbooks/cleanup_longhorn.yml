# playbooks\cleanup_longhorn.yml
- name: üí£ Limpiar completamente /dev/vdb en storage y workers
  hosts: storage,workers
  gather_facts: false
  become: true

  tasks:
    - name: üîç Mostrar si hay montajes activos en /dev/vdb
      raw: mount | grep vdb || true
      changed_when: false

    - name: üí£ Desmontar vol√∫menes y esperar
      raw: |
        umount -f /mnt/longhorn-disk 2>/dev/null || true
        umount -f /srv/nfs/postgresql 2>/dev/null || true
        umount -f /srv/nfs/shared 2>/dev/null || true
        sleep 2
      ignore_errors: true

    - name: ‚è≥ Esperar a que /dev/vdb ya no est√© montado
      raw: |
        for i in $(seq 1 5); do
          mount | grep -q vdb || exit 0
          sleep 1
        done
        exit 1
      register: umount_check
      failed_when: umount_check.rc != 0
      changed_when: false

    - name: ‚ùå Detener servicios que puedan bloquear el disco (solo en storage)
      raw: |
        systemctl stop nfs-server || true
        systemctl stop iscsid || true
      when: "'storage' in group_names"

    - name: üßπ Eliminar vol√∫menes LVM (si existen)
      raw: |
        lvremove -f /dev/vg_storage/postgres_lv 2>/dev/null || true
        lvremove -f /dev/vg_storage/shared_lv 2>/dev/null || true
        lvremove -f /dev/vg_storage/longhorn_lv 2>/dev/null || true
        sleep 1

    - name: üß± Eliminar grupo de vol√∫menes
      raw: vgremove -f vg_storage 2>/dev/null || true

    - name: üíΩ Eliminar volumen f√≠sico
      raw: pvremove -f /dev/vdb1 2>/dev/null || true

    - name: ‚ùé Eliminar partici√≥n y limpiar firmas
      raw: |
        parted -s /dev/vdb rm 1 2>/dev/null || true
        wipefs -a /dev/vdb 2>/dev/null || true

    - name: üßº Esperar a que el sistema asiente los cambios
      raw: udevadm settle

- name: üßπ Limpiar namespace, CRDs y finalizadores
  hosts: controller
  become: true
  gather_facts: false

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubectl_bin: "/usr/local/bin/kubectl"
    helm_bin: "/usr/local/bin/helm"
    namespace: "longhorn-system"
    release_name: "longhorn"

  tasks:
    - name: üß™ Instalar jq si no est√° presente
      package:
        name: jq
        state: present

    - name: ‚ùå Borrar recursos del namespace
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        {{ kubectl_bin }} delete all --all -n {{ namespace }} --ignore-not-found
        {{ kubectl_bin }} delete pvc --all -n {{ namespace }} --ignore-not-found
        {{ kubectl_bin }} delete pv --all --ignore-not-found
        {{ kubectl_bin }} delete deployment,daemonset,pod -n {{ namespace }} --all --ignore-not-found
      changed_when: false

    - name: üß® Forzar eliminaci√≥n del namespace si est√° en estado Terminating
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        ns_status=$({{ kubectl_bin }} get ns {{ namespace }} -o json | jq -r .status.phase)
        if [ "$ns_status" == "Terminating" ]; then
          {{ kubectl_bin }} get namespace {{ namespace }} -o json | jq 'del(.spec.finalizers)' > /tmp/tmp-ns.json
          {{ kubectl_bin }} replace --raw "/api/v1/namespaces/{{ namespace }}/finalize" -f /tmp/tmp-ns.json || true
          rm -f /tmp/tmp-ns.json
        fi
      changed_when: false

    - name: üí£ Eliminar CRDs Longhorn forzadamente con patch
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        for crd in $({{ kubectl_bin }} get crd -o name | grep longhorn.io); do
          name=$(basename $crd)
          echo "üîß Eliminando $name..."
          {{ kubectl_bin }} patch crd $name -p '{"metadata":{"finalizers":[]}}' --type=merge || true
          {{ kubectl_bin }} delete crd $name --grace-period=0 --force || true
        done
      changed_when: false

    - name: üßπ Desinstalar Helm release 'longhorn' si existe (incluso si est√° roto)
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        if {{ helm_bin }} list -A | grep -q "^{{ release_name }}"; then
          echo "üßπ Eliminando release '{{ release_name }}' de Helm..."
          {{ helm_bin }} uninstall {{ release_name }} -n {{ namespace }} || true
          # üßπ Si a√∫n aparece en helm list, eliminar del historial
          release_info=$({{ helm_bin }} list -A | grep "^{{ release_name }}" | awk '{print $1}')
          if [ ! -z "$release_info" ]; then
            echo "‚ö†Ô∏è Borrando release roto '{{ release_name }}' del historial Helm..."
            rm -rf ~/.cache/helm/repository
            rm -rf ~/.config/helm
            rm -rf ~/.local/share/helm
            # Tambi√©n puedes usar helm uninstall con flags adicionales si fuera necesario
          fi
        else
          echo "‚úÖ No hay release '{{ release_name }}' registrado."
        fi
      changed_when: false

    - name: ‚úÖ Verificar que todo fue eliminado
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        echo "Pods activos:"
        {{ kubectl_bin }} get pods -A | grep longhorn || echo "‚úÖ Ning√∫n pod de Longhorn activo"
      register: check_result
      changed_when: false

    - name: üßæ Mostrar resumen
      debug:
        var: check_result.stdout_lines