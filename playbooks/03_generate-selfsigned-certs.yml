# playbooks/03_generate-selfsigned-certs.yml
---
- name: 📜 3 - Generar certificado TLS autofirmado para dominio interno de Longhorn
  hosts: localhost
  become: true
  gather_facts: false

  vars_files:
    - ../vars/main.yml

  vars:
    cert_dir: "/tmp/longhorn-cert"
    tls_secret_name: "longhorn-tls-secret"
    kubeconfig_path: "/home/victory/.kube/config"
    openssl_bin: "/usr/bin/openssl"
    kubectl_bin: "/usr/local/bin/kubectl"

  tasks:

    - name: ✅ Verificar que openssl está instalado
      stat:
        path: "{{ openssl_bin }}"
      register: openssl_check

    - name: ❌ Abortamos si no se encuentra openssl
      fail:
        msg: "openssl no está instalado en {{ openssl_bin }}"
      when: not openssl_check.stat.exists

    - name: ✅ Verificar que kubectl está instalado
      stat:
        path: "{{ kubectl_bin }}"
      register: kubectl_check

    - name: ❌ Abortamos si no se encuentra kubectl
      fail:
        msg: "kubectl no está instalado en {{ kubectl_bin }}"
      when: not kubectl_check.stat.exists

    - name: 📁 Crear carpeta temporal para certificados
      file:
        path: "{{ cert_dir }}"
        state: directory
        mode: '0755'

    - name: 🔐 Generar clave privada si no existe
      command: >
        {{ openssl_bin }} genrsa -out {{ cert_dir }}/tls.key 2048
      args:
        creates: "{{ cert_dir }}/tls.key"

    - name: 🧾 Generar certificado autofirmado si no existe
      command: >
        {{ openssl_bin }} req -x509 -nodes -days 3650
        -subj "/CN={{ domain }}"
        -newkey rsa:2048
        -keyout {{ cert_dir }}/tls.key
        -out {{ cert_dir }}/tls.crt
      args:
        creates: "{{ cert_dir }}/tls.crt"

    - name: 🔐 Crear o actualizar secret TLS en Kubernetes
      shell: |
        {{ kubectl_bin }} -n {{ longhorn_namespace }} create secret tls {{ tls_secret_name }} \
          --cert={{ cert_dir }}/tls.crt \
          --key={{ cert_dir }}/tls.key \
          --dry-run=client -o yaml | {{ kubectl_bin }} apply -f -
      register: secret_result
      changed_when: "'created' in secret_result.stdout or 'configured' in secret_result.stdout"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: ✅ Mostrar resultado del TLS Secret
      debug:
        var: secret_result.stdout_lines