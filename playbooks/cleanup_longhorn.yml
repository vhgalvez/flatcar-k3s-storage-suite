# playbooks/cleanup_longhorn.yml
---
- name: 💚 1 - Preparación para la limpieza de Longhorn
  hosts: localhost
  become: true
  gather_facts: false

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubectl_bin: "/usr/local/bin/kubectl"
    helm_bin: "/usr/local/bin/helm"
    namespace: "longhorn-system"
    release_name: "longhorn"

  tasks:
    - name: 🥪 Instalar jq si no está presente
      package:
        name: jq
        state: present

    - name: 🔍 Verificar si el namespace de Longhorn existe
      shell: "{{ kubectl_bin }} get namespace {{ namespace }} --kubeconfig {{ kubeconfig_path }} --ignore-not-found"
      register: longhorn_ns_check
      failed_when: false
      changed_when: false

    - name: 💣 2 - Eliminar Helm release de Longhorn (si existe)
      when: longhorn_ns_check.rc == 0
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        {{ helm_bin }} uninstall {{ release_name }} -n {{ namespace }} || true
      changed_when: true
      ignore_errors: true

    - name: 🧼 3 - Borrar todos los recursos del namespace Longhorn
      when: longhorn_ns_check.rc == 0
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        {{ kubectl_bin }} delete all --all -n {{ namespace }} --ignore-not-found --grace-period=0 --force
        {{ kubectl_bin }} delete pvc --all -n {{ namespace }} --ignore-not-found --grace-period=0 --force
        {{ kubectl_bin }} delete svc --all -n {{ namespace }} --ignore-not-found --grace-period=0 --force
      changed_when: true
      ignore_errors: true

- name: 💣 4 - Eliminar CRDs Longhorn forzadamente
  hosts: localhost
  become: true
  gather_facts: false

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubectl_bin: "/usr/local/bin/kubectl"

  tasks:
    - name: 🧹 Iniciando eliminación de CRDs de Longhorn...
      shell: |
        export PATH=$PATH:/usr/local/bin
        export KUBECONFIG={{ kubeconfig_path }}
        echo "🧹 Iniciando eliminación de CRDs de Longhorn..."
        for crd in $(kubectl get crd -o name | grep 'longhorn.io'); do
          name=$(basename "$crd")
          echo "🔧 Procesando CRD: $name"
          {{ kubectl_bin }} patch crd "$name" -p '{"metadata":{"finalizers":[]}}' --type=merge || true
          {{ kubectl_bin }} delete crd "$name" --grace-period=0 --force || true
          echo "✅ $name procesado."
        done
      register: crd_cleanup
      failed_when: false
      changed_when: true

    - name: 🔍 Verificar si los CRDs de Longhorn fueron eliminados
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        crd_check=$({{ kubectl_bin }} get crd | grep 'longhorn.io' || true)
        if [ -n "$crd_check" ]; then
          echo "⚠️ Los CRDs de Longhorn aún existen: $crd_check"
          exit 1
        else
          echo "✅ Los CRDs de Longhorn fueron eliminados correctamente."
        fi
      register: crd_verification
      failed_when: crd_verification.rc != 0
      changed_when: false

- name: 🗑️ 5 - Eliminar el namespace Longhorn
  hosts: localhost
  become: true
  gather_facts: false

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubectl_bin: "/usr/local/bin/kubectl"
    namespace: "longhorn-system"

  tasks:
    - name: 💨 Verificar y eliminar finalizers del namespace si existen
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        if {{ kubectl_bin }} get namespace {{ namespace }} -o json | jq -e '.spec.finalizers | length > 0' > /dev/null; then
          kubectl patch namespace {{ namespace }} -p '{"metadata":{"finalizers":[]}}' --type=merge
        fi
      changed_when: true
      failed_when: false

    - name: ❌ Eliminar el namespace completamente (con espera activa)
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        {{ kubectl_bin }} delete namespace {{ namespace }} --grace-period=0 --force --ignore-not-found
        for i in $(seq 1 30); do
          sleep 2
          if ! {{ kubectl_bin }} get namespace {{ namespace }} &>/dev/null; then
            echo "✅ Namespace '{{ namespace }}' eliminado."
            exit 0
          fi
        done
        echo "⚠️ El namespace '{{ namespace }}' sigue existiendo."
        exit 1
      register: ns_delete_result
      failed_when: ns_delete_result.rc != 0
      changed_when: true

- name: 📍 6 - Limpiar completamente /dev/vdb en storage y workers
  hosts: storage,workers
  become: true
  gather_facts: false

  tasks:
    - name: 🔍 Mostrar si hay montajes activos en /dev/vdb
      raw: mount | grep vdb || true
      changed_when: false

    - name: 💣 Desmontar volúmenes
      raw: |
        umount -f /mnt/longhorn-disk || true
        umount -f /srv/nfs/postgresql || true
        umount -f /srv/nfs/shared || true
      ignore_errors: true

    - name: ⏳ Esperar desmontaje de /dev/vdb
      raw: |
        for i in $(seq 1 5); do
          mount | grep -q vdb || exit 0
          sleep 1
        done
        exit 1
      register: umount_check
      failed_when: umount_check.rc != 0
      changed_when: false

    - name: ❌ Detener servicios (solo en storage)
      raw: |
        systemctl stop nfs-server || true
        systemctl stop iscsid || true
      when: "'storage' in group_names"

    - name: 🧹 Eliminar volúmenes LVM
      raw: |
        lvremove -f /dev/vg_storage/postgres_lv || true
        lvremove -f /dev/vg_storage/shared_lv || true
        lvremove -f /dev/vg_storage/longhorn_lv || true

    - name: 🔷 Eliminar grupo de volúmenes
      raw: vgremove -f vg_storage || true

    - name: 🖽 Eliminar volumen físico
      raw: pvremove -f /dev/vdb1 || true

    - name: ❌ Eliminar particiones y limpiar firmas
      raw: |
        parted -s /dev/vdb rm 1 || true
        wipefs -a /dev/vdb || true

    - name: 🧼 Esperar asentamiento del sistema
      raw: udevadm settle