# playbooks\04_deploy_longhorn.yml
---
- name: 🚀 4 - Instalar Longhorn desde el nodo controller
  hosts: controller
  become: true
  gather_facts: false

  vars:
    kubeconfig_path: "/home/victory/.kube/config"
    kubectl_bin: "/usr/local/bin/kubectl"
    helm_bin: "/usr/local/bin/helm"
    longhorn_namespace: "longhorn-system"
    longhorn_release: "longhorn"

  pre_tasks:
    - name: 🔍 Comprobar si el namespace de Longhorn existe
      command: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get namespace {{ longhorn_namespace }}
      register: longhorn_ns_check
      failed_when: false
      changed_when: false

    - name: ⚠️ Verificar si el namespace tiene recursos
      command: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get all -n {{ longhorn_namespace }}
      register: longhorn_check
      failed_when: false
      changed_when: false
      when: longhorn_ns_check.rc == 0

    - name: ❌ Abortamos si el namespace '{{ longhorn_namespace }}' tiene recursos
      fail:
        msg: |
          ⚠️ El namespace '{{ longhorn_namespace }}' contiene recursos de una instalación anterior.
          🧹 Para limpiar y reinstalar ejecuta:
            ansible-playbook playbooks/cleanup_longhorn.yml -i inventory/hosts.ini -e "confirm_cleanup=yes"
          Recursos detectados:
          {{ longhorn_check.stdout | default('') }}
      when:
        - longhorn_ns_check.rc == 0
        - longhorn_check.stdout is defined
        - longhorn_check.stdout | trim != ''
        - "'No resources found' not in longhorn_check.stdout"

    - name: 🧹 Eliminar release roto si es necesario
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        if {{ helm_bin }} status {{ longhorn_release }} -n {{ longhorn_namespace }} 2>&1 | grep -q 'has no deployed releases'; then
          echo "⚠️ Eliminando release roto '{{ longhorn_release }}'..."
          {{ helm_bin }} uninstall {{ longhorn_release }} -n {{ longhorn_namespace }} || true
        fi
      changed_when: false
      ignore_errors: true

  tasks:
    - name: 📥 Añadir repositorio Helm de Longhorn (si no existe)
      command: >
        {{ helm_bin }} repo add longhorn https://charts.longhorn.io
      register: helm_repo_add
      failed_when: false
      changed_when: "'already exists' not in helm_repo_add.stdout"

    - name: 🔄 Actualizar repositorio Helm
      command: >
        {{ helm_bin }} repo update

    - name: 🚀 Instalar Longhorn con Helm
      command: >
        {{ helm_bin }} upgrade --install {{ longhorn_release }} longhorn/longhorn
        --namespace {{ longhorn_namespace }}
        --create-namespace
        --cleanup-on-fail
        --wait
        --timeout 10m0s
        --kubeconfig {{ kubeconfig_path }}
      register: longhorn_install
      failed_when:
        - longhorn_install.rc != 0

    - name: 🔍 Verificar si el release tiene recursos tras instalación
      shell: |
        export KUBECONFIG={{ kubeconfig_path }}
        {{ helm_bin }} get all {{ longhorn_release }} -n {{ longhorn_namespace }} || exit 1
      register: helm_get_result
      failed_when: helm_get_result.rc != 0 or 'MANIFEST' not in helm_get_result.stdout
      changed_when: false

    - name: ⏳ Esperar a que Longhorn cree al menos un pod (máx 120s)
      shell: |
        for i in {1..24}; do
          {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pods -n {{ longhorn_namespace }} --no-headers 2>/dev/null | grep -qv '^$' && exit 0
          sleep 5
        done
        echo "❌ No se detectaron pods en '{{ longhorn_namespace }}'"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get events -n {{ longhorn_namespace }} || true
        exit 1
      register: pod_exist_check
      failed_when: pod_exist_check.rc != 0
      changed_when: false

    - name: ⏳ Esperar a que los pods estén listos (máx 5 minutos)
      shell: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} wait --for=condition=Ready pod -n {{ longhorn_namespace }} --all --timeout=300s
      register: pod_ready
      failed_when: pod_ready.rc != 0

    - name: 📊 Mostrar estado de pods, PVCs y PVs
      shell: |
        echo "📦 Pods:"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pods -n {{ longhorn_namespace }}
        echo ""
        echo "📁 PVCs:"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pvc -A
        echo ""
        echo "📦 PVs:"
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pv
      register: volumes_info

    - name: ✅ Resultado del despliegue
      debug:
        var: volumes_info.stdout_lines

    - name: 🧹 Eliminar pods helm-install-traefik* completados (si Helm terminó bien)
      shell: |
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get pods -n kube-system -o json |
        jq -r '.items[] | select(.status.phase=="Succeeded" or .status.phase=="Completed") | select(.metadata.name | test("^helm-install-traefik")) | .metadata.name' |
        xargs -r -n1 {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} delete pod -n kube-system
      register: delete_helm_pods
      changed_when: "'deleted' in delete_helm_pods.stdout or delete_helm_pods.stderr"
      failed_when: false
      when: longhorn_install is defined and longhorn_install.rc == 0

    - name: 📜 Obtener eventos del namespace para diagnóstico
      shell: >
        {{ kubectl_bin }} --kubeconfig {{ kubeconfig_path }} get events -n {{ longhorn_namespace }} --sort-by='.metadata.creationTimestamp'
      register: longhorn_events
      changed_when: false
      failed_when: false

    - name: 🐞 Mostrar eventos de Longhorn (Debug)
      debug:
        var: longhorn_events.stdout