# playbooks/01_prepare_nodes.yml
# playbooks/01_prepare_nodes.yml
- name: 1️⃣ Instalar herramientas necesarias en el nodo controlador
  hosts: controller
  become: true
  gather_facts: true

  vars:
    kubectl_version: "v1.29.0"
    helm_version: "v3.14.0"
    kubectl_path: "/usr/local/bin/kubectl"
    helm_bin: "/usr/local/bin/helm"
    helm_install_path: "/tmp/helm_install"
    kubeconfig_path: "/home/victory/.kube/config"
    kubeconfig_token_path: "/home/victory/.kube/token.jwt"

  tasks:

    - name: 📦 Instalar paquetes base (pip, git, curl)
      package:
        name:
          - python3-pip
          - git
          - curl
        state: present

    - name: 🧪 Instalar biblioteca Python para Kubernetes
      pip:
        name: kubernetes

    - name: 📥 Descargar kubectl {{ kubectl_version }}
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: /tmp/kubectl
        mode: '0755'

    - name: ✅ Mover kubectl a {{ kubectl_path }}
      copy:
        src: /tmp/kubectl
        dest: "{{ kubectl_path }}"
        remote_src: yes
        mode: '0755'

    - name: 🔍 Verificar instalación de kubectl
      command: "{{ kubectl_path }} version --client"
      register: kubectl_output
      ignore_errors: true

    - name: 📊 Mostrar salida de kubectl
      debug:
        msg: "{{ kubectl_output.stdout | default('kubectl no disponible') }}"

    - name: 📁 Crear directorio temporal para Helm
      file:
        path: "{{ helm_install_path }}"
        state: directory

    - name: 📥 Descargar Helm {{ helm_version }}
      get_url:
        url: "https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz"
        dest: "{{ helm_install_path }}/helm.tar.gz"

    - name: 📦 Extraer Helm
      unarchive:
        src: "{{ helm_install_path }}/helm.tar.gz"
        dest: "{{ helm_install_path }}"
        remote_src: yes

    - name: ✅ Mover Helm a {{ helm_bin }}
      copy:
        src: "{{ helm_install_path }}/linux-amd64/helm"
        dest: "{{ helm_bin }}"
        remote_src: yes
        mode: '0755'

    - name: 🧪 Verificar versión de Helm
      command: "{{ helm_bin }} version"
      register: helm_output

    - name: 📊 Mostrar salida de Helm
      debug:
        msg: "{{ helm_output.stdout | default('Helm no disponible') }}"

    - name: 🧹 Limpiar archivos temporales de Helm
      file:
        path: "{{ helm_install_path }}"
        state: absent

    - name: 📁 Crear directorio .kube si no existe
      file:
        path: "/home/victory/.kube"
        state: directory
        owner: victory
        group: victory
        mode: '0755'

    - name: 🧼 Eliminar usuarios duplicados llamados "default" en kubeconfig
      lineinfile:
        path: "{{ kubeconfig_path }}"
        regexp: '^\s*- name: default$'
        state: absent
      when: kubeconfig_path is defined

    - name: 🔁 Reemplazar IP localhost por VIP en kubeconfig
      replace:
        path: "{{ kubeconfig_path }}"
        regexp: '127\.0\.0\.1'
        replace: "{{ vip_kubernetes }}"

    - name: ❌ Eliminar línea certificate-authority-data
      lineinfile:
        path: "{{ kubeconfig_path }}"
        regexp: '^\s*certificate-authority-data:'
        state: absent

    - name: ⚠️ Añadir 'insecure-skip-tls-verify'
      replace:
        path: "{{ kubeconfig_path }}"
        regexp: '(^\s*server: https://{{ vip_kubernetes }}:6443)'
        replace: '\1\n    insecure-skip-tls-verify: true'

    - name: 🧹 Limpiar certificados client-certificate y client-key
      lineinfile:
        path: "{{ kubeconfig_path }}"
        regexp: '^\s*(client-certificate|client-key):'
        state: absent

    - name: 🔐 Insertar token JWT en kubeconfig
      blockinfile:
        path: "{{ kubeconfig_path }}"
        marker: "# {mark} ANSIBLE MANAGED TOKEN"
        insertafter: '^users:$'
        block: |
          - name: default
            user:
              token: "{{ lookup('file', kubeconfig_token_path) }}"

    - name: 🔒 Establecer permisos correctos del kubeconfig
      file:
        path: "{{ kubeconfig_path }}"
        owner: victory
        group: victory
        mode: '0600'
